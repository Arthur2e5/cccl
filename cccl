#!/bin/bash

# cccl
# Wrapper around MS's cl.exe to make it act more like Unix cc
#
# Copyright (C) 2000-2015 by contributors listed in the AUTHORS file.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

cccl_version=1.1a1
usages='optimizers, warnings, targets, cccl, misc, license'
usage()
{
    cat << EOF
Usage:	cccl [--help] [--version]
	cccl [OPTIONS]

cccl is a wrapper around Microsoft's cl.exe compiler.  It translates parameters
given by [OPTIONS] that Unix cc understands into parameters that cl understands.

Options:
	--help		This help text.
	--help=foo[,..]	Displays help on $usages or all.
	--version	Displays CCCL version.

EOF
}

usage_cccl(){
	cat << EOF
CCCL:
	--cccl-link OPT	Add OPT to linker's options.
	--cccl-lit OPT	Add OPT to cl's options.
	--cccl-muffle	Makes the compiler less verbose about steps.
	--cccl-verbose	Increase verbosity by one.
	--cccl-quiet	Decrease verbosity by one.
	--cccl-prog	Specify an alternative cl.
	--cccl-version	Specify an alternative cl version.
			If it doesn't match [12][0-9], we try to detect one.
	--cccl-extwarn 	Enables or disables (=0) CL warning numbers in -W.

EOF
}

usage_optimizers()
{
	cat <<EOF
Optimizers:
	-O0		Disable optimizations.		/Od
	-O[1g]?		Prefer size over speed.		/Os
	-Os		Optimize for minimum size.	/O1
	-O2		Perfer speed over size.		/Of
	-O3		Optimize for maximum speed.	/O2
	-Ofast		Full optimization.		/Ox

EOF
}

usage_targets()
{
	cat << EOF
Targets:
	-m<arch>,
	-march=<arch>	Generate code for <arch>.	/arch
	-mtune=<cpu>	Tune code for <cpu>.		/G

EOF
}

usage_warnings(){
	cat << EOF
Warnings:
	-Wall		All useful warnings.		/W3
	-Weverything,
	-Wextra		Extra warnings.			/Wall
	-Werror		Treat all warnings as errors.	/Wx
(ExtWarn)
	-Werror-<n>	Treat warning n as an error.	/we<n>
	-Wno-<n>	Don't issue warnings for n.	/wd<n>

EOF
}

usage_misc(){
	cat << EOF
Misc:
	-f

EOF
}

usage_license(){
	cat <<EOF
cccl $cccl_version (cl $cl_version)

Copyright (C) 2000-2015 CCCL AUTHORS (listed in the AUTHORS file)

License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
EOF
}

case $MACHTYPE in
    *-msys)
        slash="-"
        ;;
    *)
        slash="/"
        ;;
esac

# prog specifies the program that should be run cl.exe
prog=cl
cl_version=17 # [12->98 13->03 14->05 15->08 16->10 17->12 18->13 19->15]
# opts specifies the command line to pass to the MSVC program
clopt=("${slash}nologo")
linkopt=("${slash}link")
debug=0
warning=1
# gotparam is 0 if we didn't ever see a param, in which case we show usage()
gotparam=
muffle=
verbose=3	# F0 E1 W2 I3 V4 D5
shared_index=-1
extwarn=0	# Allows -W<msvc_warning_num>, etc. Quite useless.
command_not_found_handle(){
    if [[ "$1" == usage_* ]]; then module=help EE "No such topic ${1#usage_}."; return; fi;
    EE "command not found: $(printf '%q ' "$@")";
    return 127
}

BOOM(){ FF "$1"; exit "${2-1}"; }

FF(){ ((verbose < 0)) || echo "cccl.$module: F:	$@">&2; }
EE(){ ((verbose < 1)) || echo "cccl.$module: E:	$@">&2; }
WW(){ ((verbose < 2)) || echo "cccl.$module: W:	$@">&2; }
II(){ ((verbose < 3)) || echo "cccl.$module: I:	$@">&2; }
VV(){ ((verbose < 4)) || echo "cccl.$module: V:	$@">&2; }
DD(){ ((verbose < 5)) || echo "cccl.$module: D:	$@">&2; }

cl_version(){
    if (( cl_version < "$1" )); then
        VV "Omitting higher version passes for ${2-current target}."
        return 1
    fi
}

# Returns the translated march OR mtune.
# Naive alternative for an associative array. (bash>=4, not available in common MSYS)
machine()
{
    case "$1" in
        -march=*)	machine_arch "${1#-march=}";;
        -mtune=*)	machine_tune "${1#-mtune=}";;
        -mfpu=*)	cl_version 17 "$1" && [[ "$1" == -mfpu=*vfpv4* ]] && echo arch:VFPv4;;
        -m*)		machine_arch "${1#-m}";;
    esac
}

machine_tune()
{
    local module=mtune
    case "$1" in
        386)		echo G3;;
        486)		echo G4;;
        pentium)	echo G5;;
        pentiumpro)	echo G6;;
#		itanium2)	echo G2;;	# Default in MSVC.
        *)			VV "No translation for $1."
    esac
}

machine_arch()
{
    local continue=0 module=march
    case "$1" in
        sse)		echo arch:SSE;;
        sse2)		echo arch:SSE2;;
        *)			continue=1
    esac
    (( continue )) && cl_version 16 "$1" || return
    if [[ "$1" == avx* ]]; then
        echo arch:AVX
        return
    fi
    cl_version 17 || return
    continue=0
    case "$1" in
        generic*)	echo arch:IA32;;
        armv7ve)	echo ARMv7VE;;
        *)			continue=1
    esac
    ((continue VV)) && "No translation for $1."
}

get_cl_ver(){
    $prog 2>&1 | head -n 2 | grep -Eo '(\d\.)+\d for .*$' | head -n 1 | cut -d. -f 1 && return
    module=cl_ver WW "Failed getting cl version, not changing."
    echo "${cl_version:-17}"
}

processargs()
{
### Run through every option and convert it to the proper MS one
local module=args
while (($#)); do
    case "$1" in
    -D*) optarg= ;;
    -*=*) optarg="${1#-*=}" ;;
    *) optarg= ;;
    esac
    gotparam=1

    case "$1" in

    --help=*)
        usage
        IFS=', '
        for i in ${optarg//all/$usages}; do
        	[ "$i" ] && usage_"$i"
        done
        exit 0
        ;;

    --help)
        usage
        exit 0
        ;;

    --cccl-link)
        # One single option for the linker
        shift
        case "$1" in
        /*)
            linkopt+=("${slash}${1:1}")
            ;;

        *)
            linkopt+=("$1")
            ;;
        esac
        ;;

    --cccl-muffle)
        # Remove the unnecessary junk that the compiler outputs to stdout
        muffle=1
        ;;

    --cccl-verbose)
        ((verbose++))
        ;;

    --cccl-quiet)
        ((verbose--))
        ;;

    --cccl-lit)
        clopt+=("$2")
        shift
        ;;

    --cccl-prog)
        type "$optarg" && prog=$optarg
        ;;

    --cccl-extwarn)
        extwarn=${optarg:-1}
        ;;

    --cccl-version=*)
        case "$optarg" in
        	[12][0-9])	cl_version=$optarg;;
        	*)			cl_version="$(get_cl_ver)";;
        esac
        ;;

    --version)
        usage_license
        exit 0;
        ;;

    -ansi)
        clopt+=("${slash}Za")
        ;;

    -c)
        # -c (compile only) is actually the same, but for clarity...
        clopt+=("${slash}c")
        ;;

    -g*)
        # cl only supports one debugging level
        clopt+=("${slash}Zi")
        debug=1
        ;;

    -O0)
        echo "${slash}Od"
        ;;

    -O|-O1|-Og)
        echo "${slash}Os"
        ;;

    -Os)
        echo "${slash}O1"
        ;;

    -O2)
        echo "${slash}Of"
        ;;

    -O3)
        echo "${slash}O2"
        ;;

    -Ofast)
        echo "${slash}Ox"
        ;;

    -O*)
        WW "Unknown Optimization $1"
        ;;

    -L*)
        linkopt+=("${slash}LIBPATH:${1#-L}")
        ;;

    -l*)
        clopt+=("${1#-l}.lib")
        ;;

    -m*)
        arg="$(march "$1")"
        [ -n "$arg" ] && clopt+=("${slash}$arg")
        ;;

    -o)
        # specifying output file, is it an object or an executable
        shift
        case "$1" in
        *.o | *.obj)
            clopt+=("${slash}Fo$1")
            ;;

        *.exe | *.dll | *.pyd)
            clopt+=("${slash}Fe$1")
            ;;
        esac
        ;;

    -pedantic)
        #ignore pedantic
        ;;

    -Wall)
        clopt+=("${slash}W3")
        ;;

    -Weverything|-Wextra)
        clopt+=("${slash}Wall")
        ;;

    -Werror)
        clopt+=("${slash}Wx")
        ;;

    -Werror-*)
        ((extwarn)) && clopt+=("${slash}we${1#-Werror-}")
        ;;

    -Wno-error-*) ;;

    -Wno-*)
        ((extwarn)) && clopt+=("${slash}wd${1#-Wno-}")
        ;;

    -W*)
        ;;

    -fno-strict-aliasing*)
        #ignore aliasing
        ;;

    -isystem)
        shift
        clopt+=("${slash}I$1")
        ;;

    -MT)
        exit 0
        ;;

    -mno-cygwin)
        ;;

    -shared)
        shared_index=${#clopt[@]}
        clopt+=("${slash}LD")
        ;;

    -*)
        # Remaining '-' options are passed to the compiler
        if [ -n "$optarg" ] ; then
            clopt+=("${slash}${1:1}=$optarg")
        else
            clopt+=("${slash}${1:1}")
        fi
        ;;

    *.cc | *.cxx | *.C)
        # C++ source file with non .cpp extension, make sure cl understand 
        # that it is C++
        clopt+=("${slash}Tp$1")
        ;;

    /link)
        # Same behaviour as cl - all options after /link are linker options
        shift
        while test $# -gt 0; do
            case "$1" in
            /*)
                linkopt+=("${slash}${1:1}")
                ;;

            *)
                linkopt+=("$1")
                ;;
            esac
            shift
        done
        ;;

    /*)
        # All '/' options are assumed to be for cl and are passed through
        clopt+=("${slash}${1:1}")
        ;;

    *)
        clopt+=("$1")
        ;;

    esac
    shift
done
}

# Whitespace in paths is dealt with by setting IFS and using bash arrays
# Except additional arguments in CCCL_OPTIONS need to be space separated
processargs $CCCL_OPTIONS
processargs "$@"

if [ "$shared_index" -ge 0 -a -n "$debug" ]; then
    clopt[$shared_index]="${slash}LDd"
fi

if [ -z "$gotparam" ] ; then
    usage
    exit 1
fi

if ((${#linkopt[@]} == 1)) ; then
    linkopt=()
fi

[[ "$V" == 1 ]] && ((verbose++))

if (( verbose > 3 )) ; then
  printf '%q ' "$prog" "${clopt[@]}" "${linkopt[@]}"
  echo

fi

if [ -z "$muffle" ] ; then
    exec "$prog" "${clopt[@]}" "${linkopt[@]}"
else
  # tr needed below for $ in regex to work (simple alternative to dos2unix)
    exec "$prog"${clopt[@]}" "${linkopt[@]}" | tr -d '\r' | grep -v -e "\.cpp$" -e "\.cxx$" -e "\.cc$" -e "\.C$" -e "\.c$" -e "^   Creating library" -e "^Generating Code"
    exit ${PIPESTATUS[0]}
fi
