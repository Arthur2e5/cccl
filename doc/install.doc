/*! \page install Installing cccl

\section prereq Prerequisites

cccl is a bash shell script which utilizes sed.  Therefore, you will need
at the very least Windows versions of bash and sed.  The easiest and best
source of these (as well as many other Unix tools) is RedHat's Cygwin.
Go to the <a href="http://sources.redhat.com/cygwin">Cygwin website</a> to
download and install Cygwin.  If your planning on using cccl to build 
autotools projects, make sure that you install autoconf, automake, and 
libtool as well.  

Some older distributions of Cygwin did not include libtool, so you'll 
need to install it from source.  You can use Cygwin's gcc to compile 
the libtool (it's just compiling a support library you won't use in
your MSVC projects).  Make sure that libtool installs to the same prefix
as autoconf and automake (most likely /usr).  Use the "--prefix=" option
in libtool's configure script to make sure this happens.  Otherwise,
you'll run into problems later when you try to build your autotools
project.

\section installing Installing cccl

Once you have a working Cygwin environment, you have to options.  You may
either manually copy the \b cccl file to somewhere in your path, since
it's just a script.  

Alternatively, you may do the normal Unix "./configure ; make ; make install" 
routine.

\section path Setting Up Your Path

Obviously you'll want \b cccl to be in your path.  Since cccl directly
invokes \b cl.exe and \b link.exe, you'll need to make sure that these
are in your path as well.  This may have been done for you Visual Studio
install.  If not, there may be a file called \b VCVARS32.BAT which can
be run from an MS-DOS command prompt to set your path.  However, you'll
probably want \b cl.exe and \b link.exe to be permanantly in your path.
If they're not there already, refer to the documentation included with
Visual Studio on how to do this, as the process differs on each
Windows variant.

*/
